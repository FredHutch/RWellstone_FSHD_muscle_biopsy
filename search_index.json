[
["mild-fshd.html", "Chapter 6 Markers discriminate Mild FSHD from the control samples 6.1 Differentially up-regulated genes in Mild FSHD samples 6.2 Select FSHD relavent candidates 6.3 GO analysis 6.4 Cross validation by random forests 6.5 Discriminative power per candidates 6.6 Heatmap of some best candidates 6.7 Some strong candidates", " Chapter 6 Markers discriminate Mild FSHD from the control samples The samples categorized as Mild FSHDs are characterized by low-to-absent DUX4-targeted gene expression, relatively low gene expression in all six relevant biological functions as well as lower pathological scores in average. We aim to find markers discriminating the Mild FSHD from the control samples, and these markers could be the early responsers to muscle changes and DUX4 regulation. We first identify the differentially expressed (DE) genes in the Mild FSHDs relative to the controls, then keep the DE genes that are relevant to FSHD as candidate classifiers, or predictors. To assess the power of discrimination and perform cross-validation of the set, we apply Receiver Operator Characteristics (ROC) and random forests, respectively. 6.0.1 Load libaray and datasets suppressPackageStartupMessages(library(DESeq2)) suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(pheatmap)) suppressPackageStartupMessages(library(ggplot2)) suppressPackageStartupMessages(library(BiocParallel)) multi_param &lt;- MulticoreParam(worker=2) register(multi_param, default=TRUE) pkg_dir &lt;- &quot;/fh/fast/tapscott_s/CompBio/RNA-Seq/hg38.FSHD.biopsy.all&quot; source(file.path(pkg_dir, &quot;scripts&quot;, &quot;manuscript_tools.R&quot;)) load(file.path(pkg_dir, &quot;public_data&quot;, &quot;cluster_df.rda&quot;)) load(file.path(pkg_dir, &quot;public_data&quot;, &quot;sanitized.dds.rda&quot;)) load(file.path(pkg_dir, &quot;public_data&quot;, &quot;sanitized.rlg.rda&quot;)) sanitized.dds$RNA_cluster_5 &lt;- sanitized.rlg$RNA_cluster_5 &lt;- cluster_df$RNA_cluster sanitized.dds$new_cluster_name &lt;- sanitized.rlg$new_cluster_name &lt;- cluster_df$new_cluster_name #&#39; DUX4-reguated 53 FSHD biomarkers mk &lt;- get(load(file.path(pkg_dir, &quot;data&quot;, &quot;FSHD_markers.rda&quot;)))$gene_name mk &lt;- mk[mk %in% rowData(sanitized.dds)$gene_name] 6.1 Differentially up-regulated genes in Mild FSHD samples The criteria for differentially up-related gene in Mild FSHDs: adjusted \\(p\\)-value &lt; 0.05 corresponding to \\(H_0: |lfc| = 0\\). Note that the difference in gene expression between the Mild FSHDs and controls is subtle, therefore a loosen criteria for the log fold change is applied. #&#39; tools .tidy_results &lt;- function(res, dds, padj_thres=0.05) { de &lt;- as.data.frame(res) %&gt;% rownames_to_column(var=&quot;gencode_id&quot;) %&gt;% dplyr::filter(padj &lt; padj_thres) %&gt;% mutate(gene_name = rowData(dds[gencode_id])$gene_name) %&gt;% mutate(gene_id = sapply(strsplit(gencode_id, &quot;.&quot;, fixed=TRUE), &quot;[[&quot;, 1)) } #&#39; DESeq2 #&#39; class A vs A_control new.dds &lt;- sanitized.dds design(new.dds) &lt;- ~ RNA_cluster_5 new.dds &lt;- DESeq(new.dds) classA.res &lt;- results(new.dds, alpha = 0.05, name = &quot;RNA_cluster_5_A_vs_A_Cntr&quot;) de_A &lt;- .tidy_results(classA.res, dds=new.dds, padj=0.05) de_A_up &lt;- de_A %&gt;% dplyr::filter(log2FoldChange &gt; 0) %&gt;% mutate(DUX4_marker=gene_name %in% mk) de_A_down &lt;- as.data.frame(classA.res) %&gt;% rownames_to_column(var=&quot;gene_id&quot;) %&gt;% filter(padj &lt; 0.05, log2FoldChange &lt; 0) %&gt;% mutate(gene_name=rowData(sanitized.dds[gene_id])$gene_name) #&#39; #&#39; class D vs A_control #&#39; classD.res &lt;- results(new.dds, alpha = 0.05, lfcThreshold=2, name=&quot;RNA_cluster_5_D_vs_A_Cntr&quot;) de_D_up &lt;- .tidy_results(classD.res, dds=new.dds, padj=0.05) %&gt;% dplyr::filter(log2FoldChange &gt; 0) %&gt;% mutate(DUX4_marker=gene_name %in% mk) 6.2 Select FSHD relavent candidates We keep the up-regulated genes in the Mild FSHDs that are also robustly up-regulated in the High (cluster D) samples: adjusted \\(p\\)-value &lt; 0.05 corresponding to \\(H_0: |lfc| &lt; 2\\). This way we obtain the up-regulated genes in Mild FSHDs that are disease relevant. As a result, we obtain 164 candidates. Showing below is the row z-score of 164 candidatesâ€™ log expression in all samples. #&#39; #&#39; (1) select de_up that are robust in cluster D (High, lfc &gt; 2 with padj &lt; 0.05) #&#39; (2) define key predictors: limited to DE genes in High (class D) #&#39; (3) plot heatmap to see the progression of expression in other FSHD classes #&#39; keys &lt;- de_A_up %&gt;% dplyr::filter(gencode_id %in% de_D_up$gencode_id) %&gt;% arrange(padj) keep &lt;- sanitized.rlg$RNA_cluster_5 %in% c(&quot;A_Cntr&quot;, &quot;A&quot;) data &lt;- assay(sanitized.rlg[keys$gencode_id, ]) rownames(data) &lt;- keys$gene_name ann_col &lt;- data.frame(pheno_type=sanitized.rlg$pheno_type, class = sanitized.rlg$RNA_cluster_5) rownames(ann_col) &lt;- colnames(data) zscore_data &lt;- (data - rowMeans(data)) / rowSds(data) pheatmap(zscore_data, annotation_col=ann_col, #fontsize_row=6.5, #fontsize_col=6, scale=&quot;row&quot;, show_rownames=FALSE) Figure 6.1: Heatmap of row z-score of 164 candidate log expression. 6.3 GO analysis The top 10 enriched GO terms corresponding to the 164 early responser candidates are: universal &lt;- sapply(strsplit(rownames(classA.res), &quot;.&quot;, fixed=TRUE), &quot;[[&quot;, 1) enriched &lt;- .do_goseq(universal = universal, selected_genes = keys$gene_id, return.DEInCat=FALSE, dds=sanitized.dds) ## Warning in pcls(G): initial point very close to some inequality constraints knitr::kable(enriched[1:10, c(&quot;category&quot;, &quot;term&quot;, &quot;padj&quot;)], caption = &quot;Top 10 enriched GO terms correspoding to 163 candidates.&quot;) Table 6.1: Top 10 enriched GO terms correspoding to 163 candidates. category term padj GO:0006952 defense response 0e+00 GO:0009605 response to external stimulus 0e+00 GO:0006954 inflammatory response 0e+00 GO:0002684 positive regulation of immune system process 0e+00 GO:0050776 regulation of immune response 0e+00 GO:0050778 positive regulation of immune response 0e+00 GO:0006955 immune response 0e+00 GO:0002253 activation of immune response 0e+00 GO:0002682 regulation of immune system process 1e-07 GO:0008283 cell proliferation 1e-07 6.4 Cross validation by random forests We use a random forest to determine the top 25 potentially the strongest candidates. # make expset and load ML library suppressPackageStartupMessages(library(randomForest)) suppressPackageStartupMessages(library(MLInterfaces)) ## Warning: replacing previous import &#39;BiocGenerics::var&#39; by &#39;stats::var&#39; when ## loading &#39;MLInterfaces&#39; suppressPackageStartupMessages(library(ROC)) suppressPackageStartupMessages(library(genefilter)) set.seed(123) keep &lt;- sanitized.rlg$RNA_cluster_5 %in% c(&quot;A_Cntr&quot;, &quot;A&quot;) tmp.dds &lt;- sanitized.dds[keys$gencode_id, keep] data &lt;- .get_local_rlg(keys$gencode_id, tmp.dds) rownames(data) &lt;- rowData(tmp.dds[rownames(data)])$gene_name #rownames(data) &lt;- keys$gene_name exp_set &lt;- ExpressionSet(data, phenoData = AnnotatedDataFrame(as.data.frame(colData(tmp.dds)))) # testing on one random forest in which the 32-xxxx samples are the testing set) # obtaining potential best candidates accessed by random forests train_ind &lt;- c(1:11, 14:19) rf1 &lt;- MLearn(pheno_type ~., data=exp_set, randomForestI, train_ind, ntree=1000, mtry=10, importance=TRUE) imp &lt;- getVarImp(rf1) # rownames are messed up by MLearn rownames(imp) &lt;- featureNames(exp_set) tmp_data &lt;- report(imp, n=25) %&gt;% arrange(MnDecrAcc) %&gt;% mutate(names=as.character(names)) %&gt;% mutate(names=factor(names, levels=names)) gg_imp &lt;- ggplot(tmp_data, aes(x=names, y=MnDecrAcc)) + geom_bar(stat=&quot;identity&quot;) + coord_flip() + theme_bw() imp_data &lt;- as.data.frame(imp@.Data) %&gt;% rownames_to_column(var=&quot;gene_name&quot;) %&gt;% #left_join(keys, by=&quot;gene_name&quot;) %&gt;% arrange(desc(MeanDecreaseAccuracy)) gg_imp Figure 6.2: top 25 best candidates determined by a random forest. Leave-one-out cross-validation by random forest yields 0.08 prediction error rate. #&#39; leave-one-out cross-validation error_test &lt;- lapply(1:ncol(exp_set), function(i) { train_ind &lt;- c(1:25)[-i] rf &lt;- MLearn(pheno_type ~., data=exp_set, randomForestI, train_ind, ntree=1000, mtry=10, importance=TRUE) cfm &lt;- confuMat(rf, &quot;test&quot;) error_sample &lt;- ifelse(is.table(cfm), 1, 0) }) error_rate &lt;- sum(unlist(error_test)) / ncol(exp_set) error_rate ## Samples ## 0.08 6.5 Discriminative power per candidates Estimate discriminative power for individual genes using ROC. rocs &lt;- rowpAUCs(exp_set, &quot;pheno_type&quot;, p=0.2) rocs_data &lt;- data.frame(pAUC = area(rocs), AUC = rocs@AUC) %&gt;% rownames_to_column(var=&quot;gene_name&quot;) # combine ROC and random forests results comb_data &lt;- left_join(imp_data, rocs_data, by=&quot;gene_name&quot;) %&gt;% #dplyr::filter(pAUC &gt; 0.1) %&gt;% dplyr::select(-Control, -FSHD, -MeanDecreaseGini) %&gt;% left_join(keys %&gt;% dplyr::select(-c(gencode_id, gene_id)), by=&quot;gene_name&quot;) 6.6 Heatmap of some best candidates Here we select 52 candidates (out of 164) with \\(AUC &gt; 0.9\\)) as our discovery set as early responser to muscle changes are best in discriminating mildly affect FSHDs from the controls. predictors &lt;- comb_data %&gt;% dplyr::filter(AUC &gt;= 0.9) %&gt;% mutate(gencode_id = get_ensembl(gene_name, sanitized.dds)) %&gt;% pull(gencode_id) #52 keep &lt;- sanitized.rlg$RNA_cluster_5 %in% c(&quot;A_Cntr&quot;, &quot;A&quot;) tmp.dds &lt;- sanitized.dds[predictors, keep] #data &lt;- assay(tmp.rlg) data &lt;- .get_local_rlg(predictors, tmp.dds) rownames(data) &lt;- rowData(tmp.dds)$gene_name ann_col &lt;- data.frame(pheno_type=tmp.dds$pheno_type, class = tmp.dds$RNA_cluster_5) rownames(ann_col) &lt;- colnames(data) zscore_data &lt;- (data - rowMeans(data)) / rowSds(data) pheatmap(zscore_data, annotation_col=ann_col, fontsize_row=6.5, #fontsize_col=6, scale=&quot;row&quot;, show_rownames=TRUE, cellheight=8) Figure 6.3: 52 early muscle change candidates with AUC &gt; 0.9. 6.7 Some strong candidates 6.7.1 CKDN1A CDKN1A is one of the best candidates in terms of AUC and pAUC (p=0.2). Shown below are its \\(\\log_{10}(TPM)\\) expression and ROC statistics and AUC plot. sel &lt;- c(&quot;CDKN1A&quot;, &quot;C1QA&quot;, &quot;CD4&quot;, &quot;TNC&quot;, &quot;RUNX1&quot;, &quot;LILRB5&quot;, &quot;FGF18&quot;, &quot;CCL18&quot;) factor &lt;- as.character(cluster_df$new_cluster_name) factor[cluster_df$RNA_cluster==&quot;A_Cntr&quot;] &lt;- &quot;Control&quot; factor &lt;- factor(factor, levels=c(&quot;Control&quot;, &quot;Mild&quot;, &quot;Moderate&quot;, &quot;IG-High&quot;, &quot;High&quot;, &quot;Muscle-Low&quot;)) names(factor) &lt;- as.character(cluster_df$sample_name) set_exp &lt;- .getExpFromDDS_by_cluster(sel, dds=sanitized.dds, factor=factor, type=&quot;TPM&quot;) ## Warning: `as.tibble()` is deprecated, use `as_tibble()` (but mind the new semantics). ## This warning is displayed once per session. data &lt;- set_exp %&gt;% mutate(log.value=log10(value+1)) gg_CDKN1A &lt;- ggplot(data %&gt;% filter(gene_name==&quot;CDKN1A&quot;), aes(x=group, y=log.value, group=group)) + geom_boxplot(outlier.shape = NA, width=0.7) + #geom_violin() + geom_jitter(width=0.2, size=0.8) + labs(y=bquote(log[10]~&quot;(TPM+1)&quot;), title=&quot;CDKN1A&quot;) + theme_bw() + theme(axis.text.x=element_text(angle=90, vjust=0.5, hjust=1), axis.title.x = element_blank(), plot.title = element_text(hjust=0.5, size=10), axis.title.y = element_text(size=9), legend.justification=c(0,1), legend.position=c(0, 1)) gg_CDKN1A plot(rocs[&quot;CDKN1A&quot;], main=&quot;CDKN1A&quot;) 6.7.2 CCNA1 CCNA1 is a DUX4-regulated genes and a great candidate for discriminating Mild FSHDs from the controls. Below is its \\(\\log_{10}(TPM)\\) expression by FSHD classes. ccna1_exp &lt;- .getExpFromDDS_by_cluster(&quot;CCNA1&quot;, dds=sanitized.dds, factor=factor, type=&quot;TPM&quot;) data &lt;- ccna1_exp %&gt;% mutate(log.value=log10(value+1)) gg_CCNA1 &lt;- ggplot(data %&gt;% filter(gene_name==&quot;CCNA1&quot;), aes(x=group, y=log.value, group=group)) + geom_boxplot(outlier.shape = NA, width=0.7) + #geom_violin() + geom_jitter(width=0.2, size=0.8) + labs(y=bquote(log[10]~&quot;(TPM+1)&quot;), title=&quot;CCNA1&quot;) + theme_bw() + theme(axis.text.x=element_text(angle=90, vjust=0.5, hjust=1), axis.title.x = element_blank(), plot.title = element_text(hjust=0.5, size=10), axis.title.y = element_text(size=9), legend.justification=c(0,1), legend.position=c(0, 1)) gg_CCNA1 CCNA1â€™s ROC plot and results. plot(rocs[&quot;CCNA1&quot;], main=&quot;CCNA1&quot;) 6.7.3 And few more examples Some strong candidatesâ€™ \\(\\log_{10}TPM\\) expression by FSHD classes. data &lt;- set_exp %&gt;% mutate(log.value=log10(value+1)) ggplot(data, aes(x=group, y=log.value, group=group)) + geom_boxplot(outlier.shape = NA) + geom_jitter(width=0.2, size=0.7) + facet_wrap( ~ gene_name, nrow=2, scale=&quot;free&quot;) + theme_bw() + labs(y=bquote(log[10]~&quot;(TPM+1)&quot;)) + theme(axis.text.x=element_text(angle=90, vjust=0.5, hjust=1), axis.title.x = element_blank(), legend.justification=c(0,1), legend.position=c(0, 1)) "]
]
